version: '3.5'

networks: 
  mf-bridge-network:
    driver: bridge

services:
  db:
    container_name: mf-db
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1
      - POSTGRES_DB=memefactory
    ports:
      - '5432:5432'
    networks:
      - mf-bridge-network

  redis:
    container_name: mf-redis
    image: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - mf-bridge-network

  be:
    container_name: mf-be
    build:
      context: .  
      dockerfile: Dockerfile
      target: development
    extra_hosts:
     - "host.docker.internal:host-gateway"
    environment:
      - DATABASE_HOST=host.docker.internal
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=1
      - DATABASE_DATABASE=memefactory
      - DATABASE_LOGGING=true
    ports:
      - '3000:3000'
    depends_on:
      - db
    volumes:
      - .:/usr/src/app
    networks:
      - mf-bridge-network

  zookeeper:
    container_name: mf-zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - mf-bridge-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    container_name: mf-kafka1
    hostname: kafka1
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mf-bridge-network

  kafka2:
    container_name: mf-kafka2
    hostname: kafka2
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9093:9093
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mf-bridge-network

  kafdrop:
    container_name: mf-kafdrop 
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka1
      - kafka2
    ports:
      - 19000:9000
    networks:
      - mf-bridge-network
    environment:
      KAFKA_BROKERCONNECT: kafka1:19092
